{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["AddNote","onChange","title","select","onChangeCheckbox","type","name","checked","placeholder","value","Button","children","onClick","className","App","React","useState","notes","setNotes","handleChangeCheckbox","index","event","sel","target","newValues","removeNote","console","log","filter","_","index1","changeInput","val","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,I,oBCMf,SAASA,EAAT,GAA8D,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,iBAEzC,OACE,kCACE,uBAAOC,KAAK,WAAWC,KAAMJ,EAAOK,QAASJ,EAAQF,SAAUG,IAC/D,uBAAOC,KAAK,OAAQG,YAAY,WAAYC,MAAOP,EAAOD,SAAUA,OAK1E,SAASS,EAAT,GAAwD,IAAtCR,EAAqC,EAArCA,MAAOS,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,UAC1C,OACE,yBAAQA,UAAWA,EAAWD,QAASA,EAAvC,UACGV,EADH,IACWS,KAiGAG,MAtFf,WAAgB,IAAD,EACaC,IAAMC,SAAS,CAAC,CAAEb,QAAQ,EAAOD,MAAO,SAAU,CAACC,QAAQ,EAAOD,MAAO,SACnG,CAACC,QAAQ,EAAOD,MAAO,WAFV,mBACNe,EADM,KACCC,EADD,KAkBPC,EAAuB,SAACC,GAAD,OAAW,SAACC,GAEvC,IAAMC,EAAMD,EAAME,OAAOhB,QACnBiB,EAAS,YAAOP,GACtBO,EAAUJ,GAAOjB,OAASmB,EAC1BJ,EAASM,KASLC,EAAa,SAACL,GAClBM,QAAQC,IAAIP,GACZF,EAASD,EAAMW,QAAO,SAACC,EAAGC,GAAJ,OAAeA,GAAUV,OAI3CW,EAAc,SAACX,GAAD,OAAW,SAACC,GAC9B,IAAMW,EAAMX,EAAME,OAAOd,MACnBe,EAAS,YAAOP,GACtBO,EAAUJ,GAAOlB,MAAQ8B,EACzBd,EAASM,KAEX,OACE,sBAAKX,UAAU,MAAf,UACE,uCACGI,EAAMgB,KAAI,SAACC,EAAMd,GAAP,OACVc,EAAK/B,OASO,GARX,kCACE,cAACH,EAAD,CACAG,OAAQ+B,EAAK/B,OACbC,iBAAkBe,EAAqBC,GACvClB,MAAOgC,EAAKhC,MACZD,SAAU8B,EAAYX,KAEtB,cAACV,EAAD,CAAQG,UAAU,YAAYD,QAAS,kBAAMa,EAAWL,QAP9CA,MASXH,EAAMgB,KAAI,SAACC,EAAMd,GAAP,OACbc,EAAK/B,OACH,kCACE,cAACH,EAAD,CACAG,OAAQ+B,EAAK/B,OACbC,iBAAkBe,EAAqBC,GACvClB,MAAOgC,EAAKhC,MACZD,SAAU8B,EAAYX,KAEtB,cAACV,EAAD,CAAQG,UAAU,YAAYD,QAAS,kBAAMa,EAAWL,QAP9CA,GAQD,MACb,cAACV,EAAD,CAAQG,UAAU,YAAYX,MAAM,aAAaU,QA/DnC,WAQlBM,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACd,QAAQ,EAAOD,MAAM,mBChC/BiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c9ce4e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\nfunction AddNote({onChange, title, select, onChangeCheckbox}){\r\n  //alert(noteId)\r\n  return(\r\n    <label>\r\n      <input type=\"checkbox\" name={title} checked={select} onChange={onChangeCheckbox}/>\r\n      <input type=\"text\"  placeholder=\"New task\"  value={title} onChange={onChange}/>\r\n    </label>\r\n  );\r\n}\r\n\r\nfunction Button({ title, children, onClick, className}){\r\n  return(\r\n    <button className={className} onClick={onClick}>\r\n      {title} {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n// function Swap(lst, i1, i2){\r\n//   let temp = lst[i1];\r\n//   lst[i1] = lst[i2];\r\n//   lst[i2] = temp;\r\n// }\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = React.useState([{ select: false, title: 'task1'}, {select: false, title: 'task2'}, \r\n  {select: false, title: 'task3'}]);\r\n // const [count, setCount] = React.useState(notes.length - 1);\r\n // const [select, setSelect] = React.useState(false);\r\n // const NoteList = [<div>Hello, world!</div>, <div>Buy, world!</div>]\r\n  const handleClick = () => {\r\n    //let ind; \r\n    //alert(count)\r\n  //   newValues.length > 1 ? setCount(count + 1) : setCount(0);\r\n  //   //alert(count)\r\n  //   newValues.length > 1 ? ind = newValues.length - 1 : ind = 0;\r\n  //  // alert(ind)\r\n  //   Swap(newValues, ind, count)\r\n    setNotes([...notes, {select: false, title:'taskN'}]);\r\n    //setNotes([...notes, {select: false, title:'taskN'}]);\r\n    //alert(notes)\r\n  }\r\n  const handleChangeCheckbox = (index) => (event) => {\r\n    //setSelect(event.currentTarget.checked);\r\n    const sel = event.target.checked;\r\n    const newValues = [...notes];\r\n    newValues[index].select = sel;\r\n    setNotes(newValues);\r\n    // Swap(newValues, index, count);\r\n    // count > 0 ? setCount(count - 1) : setCount(0);\r\n    // setNotes(newValues);\r\n    \r\n  }\r\n  //const [ShowNote, setShowNote] = React.useState('1');\r\n  //const [ShowNoteList, setShowNoteList] = React.useState([true]);\r\n\r\n  const removeNote = (index) => {\r\n    console.log(index)\r\n    setNotes(notes.filter((_, index1) => index1 != index));\r\n    //count > 0 ? setCount(count - 1) : setCount(0);\r\n    //alert(notes)\r\n  }\r\n  const changeInput = (index) => (event) => {\r\n    const val = event.target.value;\r\n    const newValues = [...notes];\r\n    newValues[index].title = val;\r\n    setNotes(newValues);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>ToDo:</h2>\r\n        {notes.map((item, index) => \r\n        !item.select ?\r\n          <label key={index}>\r\n            <AddNote \r\n            select={item.select} \r\n            onChangeCheckbox={handleChangeCheckbox(index)} \r\n            title={item.title} \r\n            onChange={changeInput(index)}\r\n            />\r\n            <Button className=\"delButton\" onClick={() => removeNote(index)}/>\r\n          </label> : '')}\r\n          {notes.map((item, index) => \r\n        item.select ?\r\n          <label key={index}>\r\n            <AddNote \r\n            select={item.select} \r\n            onChangeCheckbox={handleChangeCheckbox(index)} \r\n            title={item.title} \r\n            onChange={changeInput(index)}\r\n            />\r\n            <Button className=\"delButton\" onClick={() => removeNote(index)}/>\r\n          </label> : '')}\r\n        <Button className=\"addButton\" title='Add a task' onClick={handleClick}/>\r\n    </div>\r\n  );\r\n  // const IfShowNote = () => {\r\n  //   //setCount(count + 1);\r\n  //   //setShowNoteList([...ShowNoteList, ShowNote]);\r\n  //   let noteid1 = ShowNote;\r\n  //   if(ShowNote==='0'){\r\n  //    // alert(ShowNote)\r\n  //     setShowNote('1'); \r\n  //     //alert(noteid1)\r\n  //   } \r\n  //   return <label><AddNote noteId={noteid1} /><Button title=\"del\" onClick={removeNote}/></label>\r\n  // }\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}